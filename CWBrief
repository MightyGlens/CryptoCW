Faculty of CEM – Coursework Brief 2020/21

Module name:	Cryptography
Module code:	CTEC2915
Title of the Assignment: 	Combined Coursework
This coursework item is:	Summative	
This summative coursework will be marked anonymously: 	Yes	
The learning outcomes that are assessed by this coursework are:
1.	Create a new or modify an existing program in order to complete a given specification.
2.	Elementary skills in cryptanalysis.
3.	Working in groups in the organised and systematic development of software.
This coursework is:	Individual	Group

For the implementation part, you must work in groups and submit your codes as a group. For the security analysis report part, you must submit individually. Make an appointment with your lecturer to get help with problems you run into.

This coursework constitutes 50% of the overall module mark.
Date Set: 	01/02/21
Date & Time Due: 	28/03/21 unless otherwise agreed
Your marked coursework and feedback will be available to you on:
If for any reason this is not forthcoming by the due date your module leader will let you know why and when it can be expected. The Associate Professor Student Experience (studentexperience-tech@dmu.ac.uk) should be informed of any issues relating to the return of marked coursework and feedback.

Note that you should normally receive feedback on your coursework by no later than 20 University working days after the formal hand-in date, provided that you have met the submission deadline.
	14/05/21
When completed you are required to submit your coursework via:
1.	When completed you should submit your Individual Security Analysis Report through "Coursework Assessment" tab on Blackboard shell.
2.	Your Implementation Code (as a group) should be submitted to Microsoft OneDrive and shared with mehmet.kiraz@dmu.ac.uk.

If you need any support or advice on completing this coursework please visit the Student Matters tab on the Faculty of CEM Blackboard page.

Late submission of coursework policy: Late submissions will be processed in accordance with current University regulations which state: 
“the time period during which a student may submit a piece of work late without authorisation and have the work capped at 40% [50%] if passed is 14 calendar days. Work submitted unauthorised more than 14 calendar days after the original submission date will receive a mark of 0%.  These regulations apply to a student’s first attempt at coursework. Work submitted late without authorisation which constitutes reassessment of a previously failed piece of coursework will always receive a mark of 0%.”

Word Limits
The policy is to allow answers to exceed the word limit by up to 10% without penalty, and then a penalty of up to 20% of the marks for answers that exceeded the word limit by up to 30%. Any content that exceeds the word limit by over 30% would not be marked and hence not contribute to the final mark.

Academic Offences and Bad Academic Practices:
These include plagiarism, cheating, collusion, copying work and reuse of your own work, poor referencing or the passing off of somebody else's ideas as your own. If you are in any doubt about what constitutes an academic offence or bad academic practice you must check with your tutor. Further information and details of how DSU can support you, if needed, is available at: 
http://www.dmu.ac.uk/dmu-students/the-student-gateway/academic-support-office/academic-offences.aspx and 
http://www.dmu.ac.uk/dmu-students/the-student-gateway/academic-support-office/bad-academic-practice.aspx 

Tasks to be undertaken:

This assignment consists of three parts:

•	(IN GROUP) Your first task is to implement the Affine Cipher that provides both encryption and decryption operations. In an Affine Cipher, encryption of a plaintext m (which is an integer in the range 0 … n-1 and a mapping from a letter of an alphabet of size n) is computed as Enc(m) = am+b mod n where a, b are random integers with gcd(a, n) = 1. Note that a and b are your private encryption keys. These keys will also be used during decryption. Your program should allow the user the option to either encrypt or decrypt a plaintext that is chosen from the English alphabet. The user should be prompted to enter a plaintext and arbitrary keys (a and b with gcd(a, 26) = 1) to be used in the encryption process. You will convert each character of your plaintext into an integer between 0 and 25. For example, if you are given "ABCDE" then you should get 01234 (0 for A, 1 for B, 2 for C, and so on). Then you should encrypt/decrypt the sequence. After the process, you will again convert the numbers into letters (A for 0, B for 1, C for 2, and soon). The output should be text printed to console. 

NOTE: All letters should be first converted to their uppercase equivalents before encryption and decryption. White-spaces should be maintained while all other characters should be discarded. Your program is expected to be an elegant program that minimizes the repetition of common code. Note that the best program is rarely one with the most lines of code, but rather one that accomplishes the task most simply and with the least code. Comments should be used to explain everything which is not obvious from the code, e.g. why you are doing something, not exactly what it does.                                                                                                            (40 MARKS)

•	(IN GROUP) Your second task is also to write a program for cracking a ciphertext that was encrypted using an Affine Cipher. Each group will be given a ciphertext (through Announcements tab on the BB shell), and your program is expected to crack it and disclose the plaintext.
                                                                                                                               (30 MARKS)

•	(INDIVIDUAL) Your third task is to write a report that explores the weaknesses and/or strengths of the Affine Cipher. You need to provide a recommendation whether it would be sufficient for using within internal DMU communication. The report should cover the following points:
o	How did you crack the ciphertext? Please explain.
o	What are the problems of the Affine Cipher?
o	Is it possible to secure it? If so, how? If not, why?                                     (30 MARKS)
Deliverables to be submitted for assessment:

You must submit the implementation codes (for encryption/decryption and cracking a given ciphertext) as a group and the Individual Security Analysis Report. The security analysis report of the Affine Cipher should not exceed 1000 words. A brief explanation is also necessary for the design of your code (functional design). A design document should contain a diagram of the functions you are planning to implement. Try to eliminate redundant code.

How the work will be marked:
See Marking Grid.
Module leader/tutor name:	Dr. Mehmet Sabir Kiraz
Contact details:	mehmet.kiraz@dmu.ac.uk
